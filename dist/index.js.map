{"version":3,"file":"index.js","mappings":"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","sources":["webpack://hubs-portals-addon/webpack/bootstrap","webpack://hubs-portals-addon/webpack/runtime/define property getters","webpack://hubs-portals-addon/webpack/runtime/hasOwnProperty shorthand","webpack://hubs-portals-addon/external module \"hubs\"","webpack://hubs-portals-addon/./src/portal-prefab.tsx","webpack://hubs-portals-addon/external module \"bitecs\"","webpack://hubs-portals-addon/./src/components.ts","webpack://hubs-portals-addon/external module \"three\"","webpack://hubs-portals-addon/./src/portal-inflator.ts","webpack://hubs-portals-addon/./src/utils.ts","webpack://hubs-portals-addon/./src/consts.ts","webpack://hubs-portals-addon/./src/chat-commands.ts","webpack://hubs-portals-addon/./src/input.ts","webpack://hubs-portals-addon/./src/portal-system.ts","webpack://hubs-portals-addon/./src/networked-portal-system.ts","webpack://hubs-portals-addon/./src/portal-network-schema.ts","webpack://hubs-portals-addon/./src/index.ts","webpack://hubs-portals-addon/./src/shaders.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"AvatarPOVNode\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.AvatarPOVNode), [\"COLLISION_LAYERS\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.COLLISION_LAYERS), [\"FLOATY_OBJECT_FLAGS\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.FLOATY_OBJECT_FLAGS), [\"GLTFModel\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.GLTFModel), [\"HoveredRemoteRight\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.HoveredRemoteRight), [\"InputDeviceE\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.InputDeviceE), [\"InputPathsE\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.InputPathsE), [\"InputSetsE\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.InputSetsE), [\"JobRunner\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.JobRunner), [\"Layers\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.Layers), [\"Networked\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.Networked), [\"Owned\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.Owned), [\"PermissionE\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.PermissionE), [\"SystemOrderE\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.SystemOrderE), [\"SystemsE\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.SystemsE), [\"addObject3DComponent\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.addObject3DComponent), [\"animate\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.animate), [\"anyEntityWith\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.anyEntityWith), [\"cloneModelFromCache\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.cloneModelFromCache), [\"crNextFrame\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.crNextFrame), [\"createElementEntity\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.createElementEntity), [\"createNetworkedEntity\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.createNetworkedEntity), [\"defineNetworkSchema\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.defineNetworkSchema), [\"deleteTheDeletableAncestor\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.deleteTheDeletableAncestor), [\"deserializerWithMigrations\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.deserializerWithMigrations), [\"elasticOut\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.elasticOut), [\"findChildWithComponent\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.findChildWithComponent), [\"loadModel\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.loadModel), [\"paths\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.paths), [\"read\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.read), [\"registerAddon\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.registerAddon), [\"updateMaterials\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.updateMaterials), [\"write\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.write), [\"xforms\"]: () => (__WEBPACK_EXTERNAL_MODULE_hubs__.xforms) });","/** @jsx createElementEntity */\nimport { cloneModelFromCache, COLLISION_LAYERS, createElementEntity, EntityDef, Fit, FLOATY_OBJECT_FLAGS, getAbsoluteHref, loadModel, LoadModelResultT, Shape } from \"hubs\";\nimport { PortalParams } from \"./portal-inflator\";\nimport portal from \"../assets/portal.glb\";\nimport { Object3D } from \"three\";\n\nlet model: Object3D | null;\nexport async function loadPortalModel() {\n  model = ((await loadModel(portal, null, true)) as LoadModelResultT).scene;\n}\n\nexport function PortalPrefab(params: PortalParams): EntityDef {\n  return (\n    <entity\n      name=\"Portal\"\n      networked\n      networkedTransform\n      portal={{\n        debug: params.debug,\n        name: params.name\n      }}\n      cursorRaycastable\n      remoteHoverTarget\n      handCollisionTarget\n      offersRemoteConstraint\n      offersHandConstraint\n      floatyObject={{\n        flags: FLOATY_OBJECT_FLAGS.HELIUM_WHEN_LARGE\n      }}\n      destroyAtExtremeDistance\n      holdable\n      rigidbody={{\n        collisionGroup: COLLISION_LAYERS.INTERACTABLES,\n        collisionMask:\n          COLLISION_LAYERS.HANDS |\n          COLLISION_LAYERS.ENVIRONMENT |\n          COLLISION_LAYERS.INTERACTABLES |\n          COLLISION_LAYERS.AVATAR\n      }}\n      deletable\n    >\n      <entity name=\"Portal Model\" model={{ model: cloneModelFromCache(portal).scene }} />\n    </entity>\n  );\n}\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"Types\"]: () => (__WEBPACK_EXTERNAL_MODULE_bitecs__.Types), [\"addComponent\"]: () => (__WEBPACK_EXTERNAL_MODULE_bitecs__.addComponent), [\"defineComponent\"]: () => (__WEBPACK_EXTERNAL_MODULE_bitecs__.defineComponent), [\"defineQuery\"]: () => (__WEBPACK_EXTERNAL_MODULE_bitecs__.defineQuery), [\"enterQuery\"]: () => (__WEBPACK_EXTERNAL_MODULE_bitecs__.enterQuery), [\"exitQuery\"]: () => (__WEBPACK_EXTERNAL_MODULE_bitecs__.exitQuery), [\"hasComponent\"]: () => (__WEBPACK_EXTERNAL_MODULE_bitecs__.hasComponent) });","import { Types, defineComponent } from \"bitecs\";\n\nexport const Portal = defineComponent({\n  flags: Types.ui8,\n  name: Types.ui32,\n  target: Types.ui32,\n  color: Types.ui32,\n  count: Types.ui8\n});\n\nexport const NetworkedPortal = defineComponent({\n  color: Types.ui32\n});\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"AxesHelper\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.AxesHelper), [\"Color\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.Color), [\"FrontSide\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.FrontSide), [\"LinearFilter\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.LinearFilter), [\"MathUtils\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.MathUtils), [\"Matrix4\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.Matrix4), [\"Mesh\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.Mesh), [\"MeshBasicMaterial\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.MeshBasicMaterial), [\"NearestFilter\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.NearestFilter), [\"PerspectiveCamera\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.PerspectiveCamera), [\"PlaneBufferGeometry\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.PlaneBufferGeometry), [\"RGBAFormat\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.RGBAFormat), [\"ShaderMaterial\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.ShaderMaterial), [\"Sphere\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.Sphere), [\"SphereBufferGeometry\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.SphereBufferGeometry), [\"Vector3\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.Vector3), [\"WebGLRenderTarget\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.WebGLRenderTarget), [\"sRGBEncoding\"]: () => (__WEBPACK_EXTERNAL_MODULE_three__.sRGBEncoding) });","import { addComponent } from \"bitecs\";\nimport { ComponentDataT, EntityID, HubsWorld, addObject3DComponent } from \"hubs\";\nimport { NetworkedPortal, Portal } from \"./components\";\nimport { ShaderMaterial, Mesh, PlaneBufferGeometry, Vector3, Color, FrontSide } from \"three\";\nimport { portalVertexShader, portalFragmentShader } from \"./shaders\";\n\nexport const PORTAL_FLAGS = {\n  DEBUG: 1 << 0,\n  IS_INSIDE: 1 << 1\n};\n\nexport type PortalParams = {\n  name?: string;\n  debug?: boolean;\n  color?: number;\n};\n\nconst DEFAULTS: Required<PortalParams> = {\n  debug: false,\n  name: \"Unnamed portal\",\n  color: 0x0000ff\n};\n\nexport function portalInflator(world: HubsWorld, eid: number, params?: ComponentDataT): EntityID {\n  const portalParams: PortalParams = Object.assign({}, DEFAULTS, params);\n  addComponent(world, Portal, eid);\n  addComponent(world, NetworkedPortal, eid);\n\n  const { debug, name } = portalParams;\n  if (debug) {\n    Portal.flags[eid] |= PORTAL_FLAGS.DEBUG;\n  }\n  if (name) {\n    Portal.name[eid] = APP.getSid(name);\n  }\n  if (params?.color) {\n    Portal.color[eid] = params.color;\n    NetworkedPortal.color[eid] = params.color;\n  } else {\n    const randColor = Math.random() * 0xffffff;\n    Portal.color[eid] = randColor;\n    NetworkedPortal.color[eid] = randColor;\n  }\n\n  Portal.count[eid] = 0;\n\n  const plane = new Mesh(\n    new PlaneBufferGeometry(2.5, 2.5),\n    new ShaderMaterial({\n      uniforms: {\n        iChannel0: { value: null },\n        iTime: { value: 0.0 },\n        iResolution: { value: new Vector3() },\n        iPortalColor: { value: new Color(Portal.color[eid]) }\n      },\n      vertexShader: portalVertexShader,\n      fragmentShader: portalFragmentShader,\n      side: FrontSide,\n      transparent: true\n    })\n  );\n\n  addObject3DComponent(world, eid, plane);\n  return eid;\n}\n","import { App, EntityID, JobRunner, Value, animate, crNextFrame, elasticOut } from \"hubs\";\nimport { Vector3 } from \"three\";\n\nexport const animationJobs = new JobRunner();\n\nexport function* animatePortal(app: App, eid: EntityID) {\n  const obj = app.world.eid2obj.get(eid)!;\n  const onAnimate = (values: Value[]) => {\n    const scale = values[0] as Vector3;\n    obj.scale.copy(scale);\n    obj.matrixNeedsUpdate = true;\n  };\n  const scalar = 0.001;\n  const startScale = new Vector3().copy(obj.scale).multiplyScalar(scalar);\n  const endScale = new Vector3().copy(obj.scale);\n  onAnimate([startScale]);\n  yield crNextFrame();\n  yield* animate({\n    properties: [[startScale, endScale]],\n    durationMS: 1000,\n    easing: elasticOut,\n    fn: onAnimate\n  });\n}\n","export const ADDON_ID = \"hubs-portals-addon\";\n","import { defineQuery } from \"bitecs\";\nimport { App, AvatarPOVNode, CharacterControllerSystem, SystemsE, anyEntityWith, createNetworkedEntity } from \"hubs\";\nimport { Vector3 } from \"three\";\nimport { Portal } from \"./components\";\nimport { animatePortal, animationJobs } from \"./utils\";\n\nexport function spawnPortal(app: App, color?: number) {\n  const avatarEid = anyEntityWith(app.world, AvatarPOVNode)!;\n  const avatarPov = app.world.eid2obj.get(avatarEid)!;\n  const portals = portalsQuery(app.world);\n  const eid = createNetworkedEntity(app.world, \"portal\", {\n    name: `My Portal ${portals.length}`,\n    color: color ? color : Math.random() * 0xffffff\n  });\n\n  const characterControllerSystem = app.getSystem(SystemsE.CharacterControllerSystem) as CharacterControllerSystem;\n  avatarPov.getWorldPosition(avatarPOVWorldPos);\n  characterControllerSystem.findPOVPositionAboveNavMesh(\n    avatarPOVWorldPos,\n    avatarPov.localToWorld(initialPos.clone()),\n    outWorldPos,\n    false\n  );\n  const obj = app.world.eid2obj.get(eid)!;\n  outWorldPos.setY(outWorldPos.y - 0.35);\n  obj.position.copy(outWorldPos);\n  avatarPOVWorldPos.y = obj.position.y;\n  obj.lookAt(avatarPOVWorldPos);\n\n  animationJobs.add(eid, () => animatePortal(app, eid));\n}\n\nconst initialPos = new Vector3(0, 0, -1.5);\nconst avatarPOVWorldPos = new Vector3();\nconst outWorldPos = new Vector3();\nconst portalsQuery = defineQuery([Portal]);\nexport function portalChatCommand(app: App, args: string[]) {\n  spawnPortal(app, Number(args[0]));\n}\n","import {\n  App,\n  EntityID,\n  HoveredRemoteRight,\n  InputDeviceE,\n  InputPathsE,\n  InputSetsE,\n  SystemsE,\n  UserInputSystem,\n  paths,\n  xforms\n} from \"hubs\";\nimport { ADDON_ID } from \"./consts\";\nimport { spawnPortal } from \"./chat-commands\";\nimport { defineQuery, hasComponent } from \"bitecs\";\nimport { Portal } from \"./components\";\nimport { updatePortalColor } from \"./portal-system\";\n\nconst PORTAL_CREATE_ACTION = `/${ADDON_ID}/create`;\nconst PORTAL_CREATE_PATH = `${InputPathsE.actions}/${PORTAL_CREATE_ACTION}`;\nconst PORTAL_CHANGE_COLOR_ACTION = `/${ADDON_ID}/changeColor`;\nconst PORTAL_CHANGE_COLOR_PATH = `${InputPathsE.actions}/${PORTAL_CHANGE_COLOR_ACTION}`;\n\nexport function registerInput(app: App) {\n  const userInput = app.getSystem(SystemsE.UserInputSystem) as UserInputSystem;\n  userInput.registerPaths([\n    {\n      type: InputPathsE.actions,\n      value: PORTAL_CREATE_ACTION\n    },\n    {\n      type: InputPathsE.actions,\n      value: PORTAL_CHANGE_COLOR_ACTION\n    }\n  ]);\n  userInput.registerBindings(InputDeviceE.KeyboardMouse, {\n    [InputSetsE.global]: [\n      {\n        src: {\n          bool: paths.device.keyboard.key(\"control\"),\n          value: paths.device.keyboard.key(\"n\")\n        },\n        dest: { value: \"/var/control+n\" },\n        xform: xforms.copyIfTrue\n      },\n      {\n        src: { value: \"/var/control+n\" },\n        dest: { value: PORTAL_CHANGE_COLOR_PATH },\n        xform: xforms.rising\n      },\n      {\n        src: {\n          bool: paths.device.keyboard.key(\"control\"),\n          value: paths.device.keyboard.key(\"n\")\n        },\n        dest: { value: \"/var/notcontrol+n\" },\n        xform: xforms.copyIfFalse\n      },\n      {\n        src: { value: \"/var/notcontrol+n\" },\n        dest: { value: PORTAL_CREATE_PATH },\n        xform: xforms.rising\n      }\n    ]\n  });\n}\n\nconst hoveredPortalsQuery = defineQuery([Portal, HoveredRemoteRight]);\nexport function checkInput(app: App) {\n  const userInput = app.getSystem(SystemsE.UserInputSystem) as UserInputSystem;\n  if (userInput.get(PORTAL_CREATE_PATH)) {\n    spawnPortal(app);\n  } else if (userInput.get(PORTAL_CHANGE_COLOR_PATH)) {\n    hoveredPortalsQuery(app.world).forEach(eid => {\n      Portal.color[eid] = Math.random() * 0xffffff;\n      updatePortalColor(app, eid);\n      const targetNid = Portal.target[eid];\n      const targetEid = app.world.nid2eid.get(targetNid);\n      if (targetEid) {\n        Portal.color[targetEid] = Portal.color[eid];\n        updatePortalColor(app, targetEid);\n      }\n    });\n  }\n}\n","import { defineQuery, enterQuery, exitQuery } from \"bitecs\";\nimport {\n  App,\n  SystemsE,\n  CharacterControllerSystem,\n  anyEntityWith,\n  AvatarPOVNode,\n  Layers,\n  Networked,\n  EntityID,\n  deleteTheDeletableAncestor,\n  findChildWithComponent,\n  GLTFModel,\n  updateMaterials,\n  SoundEffectsSystem,\n  SoundDefT\n} from \"hubs\";\nimport {\n  Vector3,\n  Matrix4,\n  Mesh,\n  ShaderMaterial,\n  PerspectiveCamera,\n  WebGLRenderTarget,\n  LinearFilter,\n  NearestFilter,\n  RGBAFormat,\n  sRGBEncoding,\n  Sphere,\n  SphereBufferGeometry,\n  MeshBasicMaterial,\n  AxesHelper,\n  Object3D,\n  MathUtils,\n  Material,\n  MeshStandardMaterial\n} from \"three\";\nimport { Portal } from \"./components\";\nimport { PORTAL_FLAGS } from \"./portal-inflator\";\nimport PORTAL_SFX_URL from \"../assets/portal.mp3\";\nimport { animationJobs } from \"./utils\";\nimport { checkInput } from \"./input\";\n\nconst AABBs = new Map();\nconst renderTargets = new Map();\nconst helpers = new Map();\nconst cameras = new Map();\nconst tmpMat = new Matrix4();\nconst targetMat = new Matrix4().identity();\nconst portalPos = new Vector3();\nconst avatarPOVPos = new Vector3();\nconst objWorldDir = new Vector3();\nconst AABBOffset = new Vector3(0, 0.2, 0);\nlet characterControllerSystem: CharacterControllerSystem;\n\nexport const PORTAL_RENDER_WIDTH = 512;\nexport const PORTAL_RENDER_HEIGHT = 512;\nconst RADIUS = 0.75;\n\nconst sounds = new Map();\nexport function loadSfx(app: App) {\n  [PORTAL_SFX_URL].forEach(url => {\n    const sfxSystem = app.getSystem(SystemsE.SoundEffectsSystem) as SoundEffectsSystem;\n    sfxSystem.registerSound(url).then((sound: SoundDefT) => {\n      sounds.set(sound.url, sound.id);\n    });\n  });\n}\n\nfunction playPortalSfx(app: App) {\n  app.getSystem(SystemsE.SoundEffectsSystem).playSoundOneShot(sounds.get(PORTAL_SFX_URL));\n}\n\nfunction updateRenderTarget(app: App, portals: number[], source: number, target: number) {\n  const obj = <Mesh>app.world.eid2obj.get(source)!;\n  const shader = obj.material as ShaderMaterial;\n  shader.uniforms.iTime.value = app.world.time.elapsed / 1000;\n  shader.uniformsNeedUpdate = true;\n\n  if (!target) return;\n\n  const scene = app.world.scene;\n  const renderer = app.scene.renderer;\n\n  const tmpVRFlag = renderer.xr.enabled;\n  renderer.xr.enabled = false;\n\n  // TODO we are doing this because aframe uses this hook for tock.\n  // Namely to capture what camera was rendering. We don't actually use that in any of our tocks.\n  // Also tock can likely go away as a concept since we can just direclty order things after render in raf if we want to.\n  const tmpOnAfterRender = scene.onAfterRender;\n  scene.onAfterRender = () => {};\n\n  // TODO this assumption is now not true since we are not running after render. We should probably just permanently turn off autoUpdate and run matrix updates at a point we want to.\n  // The entire scene graph matrices should already be updated\n  // in tick(). They don't need to be recomputed again in tock().\n  const tmpAutoUpdate = scene.autoUpdate;\n  scene.autoUpdate = false;\n\n  const renderTarget = renderTargets.get(source);\n  renderTarget.needsUpdate = false;\n  renderTarget.lastUpdated = app.world.time.elapsed;\n\n  const tmpRenderTarget = renderer.getRenderTarget();\n  renderer.setRenderTarget(renderTarget);\n  renderer.clearDepth();\n  portals.forEach(p => {\n    if (p === target) {\n      const obj = app.world.eid2obj.get(p);\n      if (obj) obj.visible = false;\n    }\n  });\n  renderer.render(scene, cameras.get(target));\n  portals.forEach(p => {\n    if (p === target) {\n      const obj = app.world.eid2obj.get(p);\n      if (obj) obj.visible = true;\n    }\n  });\n  renderer.setRenderTarget(tmpRenderTarget);\n\n  renderer.xr.enabled = tmpVRFlag;\n  scene.onAfterRender = tmpOnAfterRender;\n  scene.autoUpdate = tmpAutoUpdate;\n}\n\nfunction disposePortal(app: App, eid: EntityID) {\n  if (Portal.flags[eid] & PORTAL_FLAGS.DEBUG) {\n    const helper = helpers.get(eid) as Object3D;\n    helper.removeFromParent();\n    helpers.delete(eid);\n  }\n\n  AABBs.delete(eid);\n\n  const renderTarget = renderTargets.get(eid);\n  renderTarget.dispose();\n  renderTargets.delete(eid);\n\n  cameras.delete(eid);\n}\n\nexport function updatePortalColor(app: App, eid: EntityID) {\n  const obj = <Mesh>app.world.eid2obj.get(eid)!;\n  const shaderMat = obj.material as ShaderMaterial;\n  shaderMat.needsUpdate = true;\n  shaderMat.uniforms.iPortalColor.value.set(Portal.color[eid]);\n\n  const modelEid = findChildWithComponent(app.world, GLTFModel, eid)!;\n  const model = app.world.eid2obj.get(modelEid)!;\n  model.traverse((object: Object3D) => {\n    updateMaterials(object, (material: Material) => {\n      (material as MeshStandardMaterial).color.set(Portal.color[eid]);\n      (material as MeshStandardMaterial).emissive.set(Portal.color[eid]);\n      return material;\n    });\n  });\n}\n\nconst portalsQuery = defineQuery([Portal]);\nconst portalsEnterQuery = enterQuery(portalsQuery);\nconst portalsExitQuery = exitQuery(portalsQuery);\nexport function portalsSystem(app: App) {\n  portalsEnterQuery(app.world).forEach(eid => {\n    const obj = <Mesh>app.world.eid2obj.get(eid)!;\n    obj.updateMatrixWorld(true);\n    const AABB = new Sphere(AABBOffset.clone(), RADIUS);\n    AABB.applyMatrix4(obj.matrixWorld);\n    AABBs.set(eid, AABB);\n    if (Portal.flags[eid] & PORTAL_FLAGS.DEBUG) {\n      var geometry = new SphereBufferGeometry(RADIUS, 6, 6);\n      var material = new MeshBasicMaterial({\n        color: 0xffffff,\n        wireframe: true\n      });\n      var helper = new Mesh(geometry, material);\n      helper.position.copy(AABBOffset);\n      helpers.set(eid, helper);\n      obj.add(helper);\n\n      const axesHelper = new AxesHelper(1);\n      obj.add(axesHelper);\n    }\n\n    // Link this portal to the last one\n    const portals = portalsQuery(app.world);\n    if (portals.length % 2 === 0) {\n      const targetEid = portals.find((_value: number, index: number, _obj: number[]) => index === portals.length - 2);\n      if (targetEid) {\n        Portal.target[eid] = Networked.id[targetEid];\n        Portal.target[targetEid] = Networked.id[eid];\n      }\n    }\n\n    // Add cameras and render targets\n    const camera = new PerspectiveCamera(80, PORTAL_RENDER_WIDTH / PORTAL_RENDER_HEIGHT, 0.1, 1000);\n    camera.layers.enable(Layers.CAMERA_LAYER_THIRD_PERSON_ONLY);\n    camera.layers.enable(Layers.CAMERA_LAYER_VIDEO_TEXTURE_TARGET);\n    camera.matrixAutoUpdate = true;\n    camera.rotateY(MathUtils.degToRad(180));\n    obj.add(camera);\n    cameras.set(eid, camera);\n\n    const renderTarget = new WebGLRenderTarget(PORTAL_RENDER_WIDTH, PORTAL_RENDER_HEIGHT, {\n      format: RGBAFormat,\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      encoding: sRGBEncoding\n    });\n    renderTargets.set(eid, renderTarget);\n\n    const shaderMat = obj.material as ShaderMaterial;\n    shaderMat.needsUpdate = true;\n\n    // Only update the renderTarget when the screens are in view\n    function setRenderTargetDirty() {\n      shaderMat.needsUpdate = true;\n    }\n\n    const targetNid = Portal.target[eid];\n    const targetEid = app.world.nid2eid.get(targetNid);\n    const color = targetEid ? Portal.color[targetEid] : Portal.color[eid];\n    shaderMat.uniforms.iPortalColor.value.set(color);\n    shaderMat.uniforms.iChannel0.value = renderTarget.texture;\n    shaderMat.uniforms.iResolution.value.set(PORTAL_RENDER_WIDTH, PORTAL_RENDER_HEIGHT, 1);\n    shaderMat.uniformsNeedUpdate = true;\n    obj.onBeforeRender = setRenderTargetDirty;\n\n    // Update portal model material color\n    const modelEid = findChildWithComponent(app.world, GLTFModel, eid)!;\n    const model = app.world.eid2obj.get(modelEid)!;\n    model.traverse((object: Object3D) => {\n      updateMaterials(object, (material: Material) => {\n        material = material.clone();\n        material.name = `${app.getString(Portal.name[eid])} Material`;\n        (material as MeshStandardMaterial).color.set(color);\n        (material as MeshStandardMaterial).emissive.set(color);\n        (material as MeshStandardMaterial).emissiveIntensity = 0.5;\n        return material;\n      });\n    });\n\n    playPortalSfx(app);\n  });\n\n  portalsExitQuery(app.world).forEach(eid => {\n    animationJobs.stop(eid);\n    disposePortal(app, eid);\n\n    const targetNid = Portal.target[eid];\n    const targetEid = app.world.nid2eid.get(targetNid);\n    if (targetEid) {\n      Portal.target[targetEid] = 0;\n      deleteTheDeletableAncestor(app.world, targetEid);\n    }\n  });\n\n  const updateState = app.scene.is(\"entered\");\n  const portals = portalsQuery(app.world);\n  portals.forEach(eid => {\n    const obj = app.world.eid2obj.get(eid)!;\n    obj.updateMatrixWorld(true);\n    const AABB = AABBs.get(eid);\n    AABB.center.copy(AABBOffset);\n    AABB.radius = RADIUS;\n    AABB.applyMatrix4(obj.matrixWorld);\n\n    const targetNid = Portal.target[eid];\n    const targetEid = app.world.nid2eid.get(targetNid);\n    const targetPortal = portals.find(otherPortal => otherPortal !== eid && targetEid === otherPortal)!;\n\n    updateRenderTarget(app, portals, eid, targetPortal);\n\n    if (!updateState || !targetPortal) {\n      return;\n    }\n\n    const targetObj = app.world.eid2obj.get(targetPortal)!;\n    const avatarPOVEid = anyEntityWith(app.world, AvatarPOVNode);\n    const avatarPOV = app.world.eid2obj.get(avatarPOVEid)!;\n    avatarPOV.getWorldPosition(avatarPOVPos);\n\n    obj.getWorldPosition(portalPos);\n    const len = portalPos.clone().sub(avatarPOVPos).lengthSq();\n    const targetCamera = cameras.get(targetPortal) as PerspectiveCamera;\n    targetCamera.fov = MathUtils.lerp(80, 120, MathUtils.clamp(1 - len / 5, 0, 1));\n    targetCamera.updateProjectionMatrix();\n\n    // Update in/out state\n    const isInside = AABB.containsPoint(avatarPOVPos);\n    const isInsidePortal = Boolean(Portal.flags[eid] & PORTAL_FLAGS.IS_INSIDE);\n    if (isInside !== isInsidePortal) {\n      if (Portal.flags[eid] & PORTAL_FLAGS.DEBUG) {\n        const portalName = app.getString(Portal.name[eid]);\n        console.log(`You are ${isInside ? \"inside\" : \"outside\"} the portal ${portalName}`);\n      }\n      if (isInside) {\n        Portal.flags[eid] |= PORTAL_FLAGS.IS_INSIDE;\n      } else {\n        Portal.flags[eid] &= ~PORTAL_FLAGS.IS_INSIDE;\n        Portal.count[eid]++;\n        const portalName = app.getString(Portal.name[eid]);\n        app.messageDispatch?.dispatch(`Portal ${portalName} used ${Portal.count[eid]} times`);\n      }\n    } else {\n      return;\n    }\n\n    obj.getWorldDirection(objWorldDir);\n    const isFacing = objWorldDir.dot(portalPos.sub(avatarPOVPos)) < 0;\n    if (isInside && isFacing) {\n      if (!characterControllerSystem) {\n        characterControllerSystem = app.getSystem(SystemsE.CharacterControllerSystem) as CharacterControllerSystem;\n      }\n      tmpMat.makeTranslation(0, 0, RADIUS * 1.2);\n      targetMat.copy(targetObj.matrixWorld).multiply(tmpMat);\n      characterControllerSystem.travelByWaypoint(targetMat, true, false);\n      avatarPOV.updateMatrixWorld();\n      playPortalSfx(app);\n    }\n  });\n\n  checkInput(app);\n\n  animationJobs.tick();\n}\n","import { defineQuery, hasComponent } from \"bitecs\";\nimport { App, Owned } from \"hubs\";\nimport { NetworkedPortal, Portal } from \"./components\";\nimport { updatePortalColor } from \"./portal-system\";\n\nconst networkedPortalsQuery = defineQuery([Portal, NetworkedPortal]);\nexport function networkedPortalsSystem(app: App) {\n  networkedPortalsQuery(app.world).forEach(eid => {\n    // If I own the entity I'm responsible for updating the networked component\n    if (hasComponent(app.world, Owned, eid)) {\n      NetworkedPortal.color[eid] = Portal.color[eid];\n    } else {\n      if (Portal.color[eid] !== NetworkedPortal.color[eid]) {\n        Portal.color[eid] = NetworkedPortal.color[eid];\n        updatePortalColor(app, eid);\n      }\n    }\n  });\n}\n","import {\n  EntityID,\n  MigrationFn,\n  NetworkSchema,\n  StoredComponent,\n  defineNetworkSchema,\n  deserializerWithMigrations,\n  read,\n  write\n} from \"hubs\";\nimport { NetworkedPortal } from \"./components\";\n\nconst migrations = new Map<EntityID, MigrationFn>();\n\nfunction apply(eid: EntityID, { version, data }: StoredComponent) {\n  if (version !== 1) return false;\n\n  const { color }: { color: number } = data;\n  write(NetworkedPortal.color, eid, color);\n  return true;\n}\n\nconst runtimeSerde = defineNetworkSchema(NetworkedPortal);\nexport const NetworkedPortalSchema: NetworkSchema = {\n  componentName: \"networked-portal\",\n  serialize: runtimeSerde.serialize,\n  deserialize: runtimeSerde.deserialize,\n  serializeForStorage: function serializeForStorage(eid: EntityID) {\n    return {\n      version: 1,\n      data: {\n        color: read(NetworkedPortal.color, eid)\n      }\n    };\n  },\n  deserializeFromStorage: deserializerWithMigrations(migrations, apply)\n};\n","import { App, PermissionE, SystemOrderE, registerAddon } from \"hubs\";\nimport { PortalPrefab, loadPortalModel } from \"./portal-prefab\";\nimport { portalInflator } from \"./portal-inflator\";\nimport { loadSfx, portalsSystem } from \"./portal-system\";\nimport { portalChatCommand } from \"./chat-commands\";\nimport { networkedPortalsSystem } from \"./networked-portal-system\";\nimport { NetworkedPortal } from \"./components\";\nimport { NetworkedPortalSchema } from \"./portal-network-schema\";\nimport { registerInput } from \"./input\";\nimport { ADDON_ID } from \"./consts\";\n\nfunction onReady(app: App) {\n  loadSfx(app);\n  loadPortalModel();\n  registerInput(app);\n}\n\nregisterAddon(ADDON_ID, {\n  name: \"Portals Add-On\",\n  description: \"Simple portals implementation.\",\n  onReady,\n  prefab: { id: \"portal\", config: { permission: PermissionE.SPAWN_AND_MOVE_MEDIA, template: PortalPrefab } },\n  inflator: { jsx: { id: \"portal\", inflator: portalInflator } },\n  system: [\n    { system: portalsSystem, order: SystemOrderE.PostPhysics },\n    { system: networkedPortalsSystem, order: SystemOrderE.PostPhysics }\n  ],\n  chatCommand: { id: \"portal\", command: portalChatCommand },\n  networkSchema: { component: NetworkedPortal, schema: NetworkedPortalSchema }\n});\n","export const portalVertexShader = `\nvarying vec2 vUv;\nvoid main()\n{\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    vUv = uv;\n    // vUv.x = 1.0 - vUv.x;\n}\n`;\n\nexport const portalFragmentShader = `\nvarying vec2 vUv;\n\nuniform sampler2D iChannel0;\nuniform vec3 iResolution;\nuniform vec3 iPortalColor;\nuniform float iTime;\n \n#include <common>\n\nvec3 greyscale(vec3 color, float str) {\n    float g = dot(color, vec3(0.299, 0.587, 0.114));\n    return mix(color, vec3(g), str);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 2.0*(fragCoord-.5*iResolution.xy)/iResolution.xy;\n    uv.y *= 0.65;\n\n    // polar\n    float d = length(uv); \n    //float alpha = atan(uv.y, uv.x) / (2.*PI) + 0.5; // normalize -pi,pi to 0, 1 for display\n    float alpha = atan(uv.y, uv.x); //-pi to pi\n    vec2 pc = vec2(d, alpha); // polar coords\n    \n    //fancy calc or irregular shape\n    float sinVal = sin(0.5+pc.y*3.+t*2.)*sin(pc.y*8.+t*2.)*0.04;\n    float thk = 0.1;\n    float res;\n    float r = 0.51;\n    float targetVal = r + sinVal;\n    \n    res = 1. - smoothstep(targetVal-thk, targetVal+thk, d);\n    \n    vec3 col;\n    \n    vec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    float cLength = length(cPos);\n    vec2 rippleUV = fragCoord.xy/iResolution.xy+(cPos/cLength)*cos(cLength*12.0-iTime*4.0) * 0.01;\n    vec3 portalColor = texture(iChannel0,rippleUV).xyz;\n    portalColor = greyscale(portalColor, 1.0);\n    vec3 bgColor = vec3(0);\n    \n    col = mix(bgColor, portalColor, res);\n    vec3 edgeColor = iPortalColor;  // add edge tint\n    float edgeDist = smoothstep(targetVal-thk,targetVal+thk, d);\n    if(d < targetVal+thk){\n        col += edgeColor*edgeDist; // could be smoother\n    }\n    if (res < 0.01) discard;\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n \nvoid main() {\n    mainImage(gl_FragColor, vUv * iResolution.xy);\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n}\n`;\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE_hubs__","x","d","model","__WEBPACK_EXTERNAL_MODULE_bitecs__","Portal","defineComponent","flags","Types","ui8","name","ui32","target","color","count","NetworkedPortal","__WEBPACK_EXTERNAL_MODULE_three__","PORTAL_FLAGS","DEFAULTS","debug","animationJobs","JobRunner","ADDON_ID","spawnPortal","app","avatarEid","anyEntityWith","world","AvatarPOVNode","avatarPov","eid2obj","portals","portalsQuery","eid","createNetworkedEntity","length","Math","random","characterControllerSystem","getSystem","SystemsE","CharacterControllerSystem","getWorldPosition","avatarPOVWorldPos","findPOVPositionAboveNavMesh","localToWorld","initialPos","clone","outWorldPos","setY","position","copy","lookAt","add","onAnimate","values","scale","matrixNeedsUpdate","startScale","Vector3","multiplyScalar","endScale","crNextFrame","animate","properties","durationMS","easing","elasticOut","fn","animatePortal","defineQuery","PORTAL_CREATE_ACTION","PORTAL_CREATE_PATH","InputPathsE","actions","PORTAL_CHANGE_COLOR_ACTION","PORTAL_CHANGE_COLOR_PATH","hoveredPortalsQuery","HoveredRemoteRight","AABBs","Map","renderTargets","helpers","cameras","tmpMat","Matrix4","targetMat","identity","portalPos","avatarPOVPos","objWorldDir","AABBOffset","RADIUS","sounds","playPortalSfx","SoundEffectsSystem","playSoundOneShot","updatePortalColor","shaderMat","material","needsUpdate","uniforms","iPortalColor","value","set","modelEid","findChildWithComponent","GLTFModel","traverse","object","updateMaterials","emissive","portalsEnterQuery","enterQuery","portalsExitQuery","exitQuery","networkedPortalsQuery","migrations","runtimeSerde","defineNetworkSchema","NetworkedPortalSchema","componentName","serialize","deserialize","serializeForStorage","version","data","read","deserializeFromStorage","deserializerWithMigrations","write","registerAddon","description","onReady","forEach","url","registerSound","then","sound","id","loadSfx","loadModel","scene","loadPortalModel","userInput","UserInputSystem","registerPaths","type","registerBindings","InputDeviceE","KeyboardMouse","InputSetsE","global","src","bool","paths","device","keyboard","dest","xform","xforms","copyIfTrue","rising","copyIfFalse","registerInput","prefab","config","permission","PermissionE","SPAWN_AND_MOVE_MEDIA","template","params","networked","networkedTransform","portal","cursorRaycastable","remoteHoverTarget","handCollisionTarget","offersRemoteConstraint","offersHandConstraint","floatyObject","FLOATY_OBJECT_FLAGS","HELIUM_WHEN_LARGE","destroyAtExtremeDistance","holdable","rigidbody","collisionGroup","COLLISION_LAYERS","INTERACTABLES","collisionMask","HANDS","ENVIRONMENT","AVATAR","deletable","cloneModelFromCache","inflator","jsx","portalParams","assign","addComponent","APP","getSid","randColor","plane","Mesh","PlaneBufferGeometry","ShaderMaterial","iChannel0","iTime","iResolution","Color","vertexShader","fragmentShader","side","FrontSide","transparent","addObject3DComponent","system","updateMatrixWorld","AABB","Sphere","applyMatrix4","matrixWorld","geometry","SphereBufferGeometry","MeshBasicMaterial","wireframe","helper","axesHelper","AxesHelper","targetEid","find","_value","index","_obj","Networked","camera","PerspectiveCamera","PORTAL_RENDER_WIDTH","layers","enable","Layers","CAMERA_LAYER_THIRD_PERSON_ONLY","CAMERA_LAYER_VIDEO_TEXTURE_TARGET","matrixAutoUpdate","rotateY","MathUtils","degToRad","renderTarget","WebGLRenderTarget","format","RGBAFormat","minFilter","LinearFilter","magFilter","NearestFilter","encoding","sRGBEncoding","targetNid","nid2eid","texture","uniformsNeedUpdate","onBeforeRender","getString","emissiveIntensity","stop","removeFromParent","delete","dispose","disposePortal","deleteTheDeletableAncestor","updateState","is","center","radius","targetPortal","otherPortal","source","shader","time","elapsed","renderer","tmpVRFlag","xr","enabled","tmpOnAfterRender","onAfterRender","tmpAutoUpdate","autoUpdate","lastUpdated","tmpRenderTarget","getRenderTarget","setRenderTarget","clearDepth","p","visible","render","updateRenderTarget","targetObj","avatarPOVEid","avatarPOV","len","sub","lengthSq","targetCamera","fov","lerp","clamp","updateProjectionMatrix","isInside","containsPoint","Boolean","portalName","console","log","messageDispatch","dispatch","getWorldDirection","isFacing","dot","makeTranslation","multiply","travelByWaypoint","checkInput","tick","order","SystemOrderE","PostPhysics","hasComponent","Owned","chatCommand","command","args","Number","networkSchema","component","schema"],"sourceRoot":""}