{"version":3,"sources":["../src/index.ts","../src/portal-prefab.tsx","../src/portal-inflator.ts","../src/components.ts","../src/shaders.ts","../src/portal-system.ts","../src/utils.ts","../src/input.ts","../src/consts.ts","../src/chat-commands.ts","../src/networked-portal-system.ts","../src/portal-network-schema.ts"],"names":["defineQuery","SystemsE","anyEntityWith","AvatarPOVNode","Vector3","Mesh","characterControllerSystem","obj","model","portalsQuery","portals","targetEid","material","hasComponent"],"mappings":";AAAA,SAAc,aAAa,cAAc,qBAAqB;;;ACC9D,SAAS,qBAAqB,kBAAkB,qBAAqC,qBAAsC,iBAA0C;AAErK,OAAO,YAAY;AAGnB,IAAI;AACJ,eAAsB,kBAAkB;AACtC,WAAU,MAAM,UAAU,QAAQ,MAAM,IAAI,GAAwB;AACtE;AAEO,SAAS,aAAa,QAAiC;AAC5D,SACE;AAAA,IAAC;AAAA;AAAA,MACC,MAAK;AAAA,MACL,WAAS;AAAA,MACT,oBAAkB;AAAA,MAClB,QAAQ;AAAA,QACN,OAAO,OAAO;AAAA,QACd,MAAM,OAAO;AAAA,MACf;AAAA,MACA,mBAAiB;AAAA,MACjB,mBAAiB;AAAA,MACjB,qBAAmB;AAAA,MACnB,wBAAsB;AAAA,MACtB,sBAAoB;AAAA,MACpB,cAAc;AAAA,QACZ,OAAO,oBAAoB;AAAA,MAC7B;AAAA,MACA,0BAAwB;AAAA,MACxB,UAAQ;AAAA,MACR,WAAW;AAAA,QACT,gBAAgB,iBAAiB;AAAA,QACjC,eACE,iBAAiB,QACjB,iBAAiB,cACjB,iBAAiB,gBACjB,iBAAiB;AAAA,MACrB;AAAA,MACA,WAAS;AAAA;AAAA,IAET,oCAAC,YAAO,MAAK,gBAAe,OAAO,EAAE,OAAO,oBAAoB,MAAM,EAAE,MAAM,GAAG;AAAA,EACnF;AAEJ;;;AC5CA,SAAS,oBAAoB;AAC7B,SAA8C,4BAA4B;;;ACD1E,SAAS,OAAO,uBAAuB;AAEhC,IAAM,SAAS,gBAAgB;AAAA,EACpC,OAAO,MAAM;AAAA,EACb,MAAM,MAAM;AAAA,EACZ,QAAQ,MAAM;AAAA,EACd,OAAO,MAAM;AAAA,EACb,OAAO,MAAM;AACf,CAAC;AAEM,IAAM,kBAAkB,gBAAgB;AAAA,EAC7C,OAAO,MAAM;AACf,CAAC;;;ADTD,SAAS,gBAAgB,MAAM,qBAAqB,SAAS,OAAO,iBAAiB;;;AEH9E,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU3B,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AFJ7B,IAAM,eAAe;AAAA,EAC1B,OAAO,KAAK;AAAA,EACZ,WAAW,KAAK;AAClB;AAQA,IAAM,WAAmC;AAAA,EACvC,OAAO;AAAA,EACP,MAAM;AAAA,EACN,OAAO;AACT;AAEO,SAAS,eAAe,OAAkB,KAAa,QAAmC;AAC/F,QAAM,eAA6B,OAAO,OAAO,CAAC,GAAG,UAAU,MAAM;AACrE,eAAa,OAAO,QAAQ,GAAG;AAC/B,eAAa,OAAO,iBAAiB,GAAG;AAExC,QAAM,EAAE,OAAO,KAAK,IAAI;AACxB,MAAI,OAAO;AACT,WAAO,MAAM,GAAG,KAAK,aAAa;AAAA,EACpC;AACA,MAAI,MAAM;AACR,WAAO,KAAK,GAAG,IAAI,IAAI,OAAO,IAAI;AAAA,EACpC;AACA,MAAI,QAAQ,OAAO;AACjB,WAAO,MAAM,GAAG,IAAI,OAAO;AAC3B,oBAAgB,MAAM,GAAG,IAAI,OAAO;AAAA,EACtC,OAAO;AACL,UAAM,YAAY,KAAK,OAAO,IAAI;AAClC,WAAO,MAAM,GAAG,IAAI;AACpB,oBAAgB,MAAM,GAAG,IAAI;AAAA,EAC/B;AAEA,SAAO,MAAM,GAAG,IAAI;AAEpB,QAAM,QAAQ,IAAI;AAAA,IAChB,IAAI,oBAAoB,KAAK,GAAG;AAAA,IAChC,IAAI,eAAe;AAAA,MACjB,UAAU;AAAA,QACR,WAAW,EAAE,OAAO,KAAK;AAAA,QACzB,OAAO,EAAE,OAAO,EAAI;AAAA,QACpB,aAAa,EAAE,OAAO,IAAI,QAAQ,EAAE;AAAA,QACpC,cAAc,EAAE,OAAO,IAAI,MAAM,OAAO,MAAM,GAAG,CAAC,EAAE;AAAA,MACtD;AAAA,MACA,cAAc;AAAA,MACd,gBAAgB;AAAA,MAChB,MAAM;AAAA,MACN,aAAa;AAAA,IACf,CAAC;AAAA,EACH;AAEA,uBAAqB,OAAO,KAAK,KAAK;AACtC,SAAO;AACT;;;AGhEA,SAAS,eAAAA,cAAa,YAAY,iBAAiB;AACnD;AAAA,EAEE,YAAAC;AAAA,EAEA,iBAAAC;AAAA,EACA,iBAAAC;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OAGK;AACP;AAAA,EACE,WAAAC;AAAA,EACA;AAAA,EACA,QAAAC;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,OAGK;AAGP,OAAO,oBAAoB;;;ACvC3B,SAAwB,WAAkB,SAAS,aAAa,kBAAkB;AAClF,SAAS,WAAAD,gBAAe;AAEjB,IAAM,gBAAgB,IAAI,UAAU;AAEpC,UAAU,cAAc,KAAU,KAAe;AACtD,QAAM,MAAM,IAAI,MAAM,QAAQ,IAAI,GAAG;AACrC,QAAM,YAAY,CAAC,WAAoB;AACrC,UAAM,QAAQ,OAAO,CAAC;AACtB,QAAI,MAAM,KAAK,KAAK;AACpB,QAAI,oBAAoB;AAAA,EAC1B;AACA,QAAM,SAAS;AACf,QAAM,aAAa,IAAIA,SAAQ,EAAE,KAAK,IAAI,KAAK,EAAE,eAAe,MAAM;AACtE,QAAM,WAAW,IAAIA,SAAQ,EAAE,KAAK,IAAI,KAAK;AAC7C,YAAU,CAAC,UAAU,CAAC;AACtB,QAAM,YAAY;AAClB,SAAO,QAAQ;AAAA,IACb,YAAY,CAAC,CAAC,YAAY,QAAQ,CAAC;AAAA,IACnC,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,IAAI;AAAA,EACN,CAAC;AACH;;;ACvBA;AAAA,EAGE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAAH;AAAA,EAEA;AAAA,EACA;AAAA,OACK;;;ACXA,IAAM,WAAW;;;ACAxB,SAAS,mBAAmB;AAC5B,SAAc,eAA0C,UAAU,eAAe,6BAA6B;AAC9G,SAAS,WAAAG,gBAAe;AAIjB,SAAS,YAAY,KAAU,OAAgB;AACpD,QAAM,YAAY,cAAc,IAAI,OAAO,aAAa;AACxD,QAAM,YAAY,IAAI,MAAM,QAAQ,IAAI,SAAS;AACjD,QAAM,UAAU,aAAa,IAAI,KAAK;AACtC,QAAM,MAAM,sBAAsB,IAAI,OAAO,UAAU;AAAA,IACrD,MAAM,aAAa,QAAQ,MAAM;AAAA,IACjC,OAAO,QAAQ,QAAQ,KAAK,OAAO,IAAI;AAAA,EACzC,CAAC;AAED,QAAME,6BAA4B,IAAI,UAAU,SAAS,yBAAyB;AAClF,YAAU,iBAAiB,iBAAiB;AAC5C,EAAAA,2BAA0B;AAAA,IACxB;AAAA,IACA,UAAU,aAAa,WAAW,MAAM,CAAC;AAAA,IACzC;AAAA,IACA;AAAA,EACF;AACA,QAAM,MAAM,IAAI,MAAM,QAAQ,IAAI,GAAG;AACrC,cAAY,KAAK,YAAY,IAAI,IAAI;AACrC,MAAI,SAAS,KAAK,WAAW;AAC7B,oBAAkB,IAAI,IAAI,SAAS;AACnC,MAAI,OAAO,iBAAiB;AAE5B,gBAAc,IAAI,KAAK,MAAM,cAAc,KAAK,GAAG,CAAC;AACtD;AAEA,IAAM,aAAa,IAAIF,SAAQ,GAAG,GAAG,IAAI;AACzC,IAAM,oBAAoB,IAAIA,SAAQ;AACtC,IAAM,cAAc,IAAIA,SAAQ;AAChC,IAAM,eAAe,YAAY,CAAC,MAAM,CAAC;AAClC,SAAS,kBAAkB,KAAU,MAAgB;AAC1D,cAAY,KAAK,OAAO,KAAK,CAAC,CAAC,CAAC;AAClC;;;AFxBA,SAAS,eAAAJ,oBAAiC;AAI1C,IAAM,uBAAuB,IAAI,QAAQ;AACzC,IAAM,qBAAqB,GAAG,YAAY,OAAO,IAAI,oBAAoB;AACzE,IAAM,6BAA6B,IAAI,QAAQ;AAC/C,IAAM,2BAA2B,GAAG,YAAY,OAAO,IAAI,0BAA0B;AAE9E,SAAS,cAAc,KAAU;AACtC,QAAM,YAAY,IAAI,UAAUC,UAAS,eAAe;AACxD,YAAU,cAAc;AAAA,IACtB;AAAA,MACE,MAAM,YAAY;AAAA,MAClB,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,MAAM,YAAY;AAAA,MAClB,OAAO;AAAA,IACT;AAAA,EACF,CAAC;AACD,YAAU,iBAAiB,aAAa,eAAe;AAAA,IACrD,CAAC,WAAW,MAAM,GAAG;AAAA,MACnB;AAAA,QACE,KAAK;AAAA,UACH,MAAM,MAAM,OAAO,SAAS,IAAI,SAAS;AAAA,UACzC,OAAO,MAAM,OAAO,SAAS,IAAI,GAAG;AAAA,QACtC;AAAA,QACA,MAAM,EAAE,OAAO,iBAAiB;AAAA,QAChC,OAAO,OAAO;AAAA,MAChB;AAAA,MACA;AAAA,QACE,KAAK,EAAE,OAAO,iBAAiB;AAAA,QAC/B,MAAM,EAAE,OAAO,yBAAyB;AAAA,QACxC,OAAO,OAAO;AAAA,MAChB;AAAA,MACA;AAAA,QACE,KAAK;AAAA,UACH,MAAM,MAAM,OAAO,SAAS,IAAI,SAAS;AAAA,UACzC,OAAO,MAAM,OAAO,SAAS,IAAI,GAAG;AAAA,QACtC;AAAA,QACA,MAAM,EAAE,OAAO,oBAAoB;AAAA,QACnC,OAAO,OAAO;AAAA,MAChB;AAAA,MACA;AAAA,QACE,KAAK,EAAE,OAAO,oBAAoB;AAAA,QAClC,MAAM,EAAE,OAAO,mBAAmB;AAAA,QAClC,OAAO,OAAO;AAAA,MAChB;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,IAAM,sBAAsBD,aAAY,CAAC,QAAQ,kBAAkB,CAAC;AAC7D,SAAS,WAAW,KAAU;AACnC,QAAM,YAAY,IAAI,UAAUC,UAAS,eAAe;AACxD,MAAI,UAAU,IAAI,kBAAkB,GAAG;AACrC,gBAAY,GAAG;AAAA,EACjB,WAAW,UAAU,IAAI,wBAAwB,GAAG;AAClD,wBAAoB,IAAI,KAAK,EAAE,QAAQ,SAAO;AAC5C,aAAO,MAAM,GAAG,IAAI,KAAK,OAAO,IAAI;AACpC,wBAAkB,KAAK,GAAG;AAC1B,YAAM,YAAY,OAAO,OAAO,GAAG;AACnC,YAAM,YAAY,IAAI,MAAM,QAAQ,IAAI,SAAS;AACjD,UAAI,WAAW;AACb,eAAO,MAAM,SAAS,IAAI,OAAO,MAAM,GAAG;AAC1C,0BAAkB,KAAK,SAAS;AAAA,MAClC;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;AFzCA,IAAM,QAAQ,oBAAI,IAAI;AACtB,IAAM,gBAAgB,oBAAI,IAAI;AAC9B,IAAM,UAAU,oBAAI,IAAI;AACxB,IAAM,UAAU,oBAAI,IAAI;AACxB,IAAM,SAAS,IAAI,QAAQ;AAC3B,IAAM,YAAY,IAAI,QAAQ,EAAE,SAAS;AACzC,IAAM,YAAY,IAAIG,SAAQ;AAC9B,IAAM,eAAe,IAAIA,SAAQ;AACjC,IAAM,cAAc,IAAIA,SAAQ;AAChC,IAAM,aAAa,IAAIA,SAAQ,GAAG,KAAK,CAAC;AACxC,IAAI;AAEG,IAAM,sBAAsB;AAC5B,IAAM,uBAAuB;AACpC,IAAM,SAAS;AAEf,IAAM,SAAS,oBAAI,IAAI;AAChB,SAAS,QAAQ,KAAU;AAChC,GAAC,cAAc,EAAE,QAAQ,SAAO;AAC9B,UAAM,YAAY,IAAI,UAAUH,UAAS,kBAAkB;AAC3D,cAAU,cAAc,GAAG,EAAE,KAAK,CAAC,UAAqB;AACtD,aAAO,IAAI,MAAM,KAAK,MAAM,EAAE;AAAA,IAChC,CAAC;AAAA,EACH,CAAC;AACH;AAEA,SAAS,cAAc,KAAU;AAC/B,MAAI,UAAUA,UAAS,kBAAkB,EAAE,iBAAiB,OAAO,IAAI,cAAc,CAAC;AACxF;AAEA,SAAS,mBAAmB,KAAU,SAAmB,QAAgB,QAAgB;AACvF,QAAM,MAAY,IAAI,MAAM,QAAQ,IAAI,MAAM;AAC9C,QAAM,SAAS,IAAI;AACnB,SAAO,SAAS,MAAM,QAAQ,IAAI,MAAM,KAAK,UAAU;AACvD,SAAO,qBAAqB;AAE5B,MAAI,CAAC;AAAQ;AAEb,QAAM,QAAQ,IAAI,MAAM;AACxB,QAAM,WAAW,IAAI,MAAM;AAE3B,QAAM,YAAY,SAAS,GAAG;AAC9B,WAAS,GAAG,UAAU;AAKtB,QAAM,mBAAmB,MAAM;AAC/B,QAAM,gBAAgB,MAAM;AAAA,EAAC;AAK7B,QAAM,gBAAgB,MAAM;AAC5B,QAAM,aAAa;AAEnB,QAAM,eAAe,cAAc,IAAI,MAAM;AAC7C,eAAa,cAAc;AAC3B,eAAa,cAAc,IAAI,MAAM,KAAK;AAE1C,QAAM,kBAAkB,SAAS,gBAAgB;AACjD,WAAS,gBAAgB,YAAY;AACrC,WAAS,WAAW;AACpB,UAAQ,QAAQ,OAAK;AACnB,QAAI,MAAM,QAAQ;AAChB,YAAMM,OAAM,IAAI,MAAM,QAAQ,IAAI,CAAC;AACnC,UAAIA;AAAK,QAAAA,KAAI,UAAU;AAAA,IACzB;AAAA,EACF,CAAC;AACD,WAAS,OAAO,OAAO,QAAQ,IAAI,MAAM,CAAC;AAC1C,UAAQ,QAAQ,OAAK;AACnB,QAAI,MAAM,QAAQ;AAChB,YAAMA,OAAM,IAAI,MAAM,QAAQ,IAAI,CAAC;AACnC,UAAIA;AAAK,QAAAA,KAAI,UAAU;AAAA,IACzB;AAAA,EACF,CAAC;AACD,WAAS,gBAAgB,eAAe;AAExC,WAAS,GAAG,UAAU;AACtB,QAAM,gBAAgB;AACtB,QAAM,aAAa;AACrB;AAEA,SAAS,cAAc,KAAU,KAAe;AAC9C,MAAI,OAAO,MAAM,GAAG,IAAI,aAAa,OAAO;AAC1C,UAAM,SAAS,QAAQ,IAAI,GAAG;AAC9B,WAAO,iBAAiB;AACxB,YAAQ,OAAO,GAAG;AAAA,EACpB;AAEA,QAAM,OAAO,GAAG;AAEhB,QAAM,eAAe,cAAc,IAAI,GAAG;AAC1C,eAAa,QAAQ;AACrB,gBAAc,OAAO,GAAG;AAExB,UAAQ,OAAO,GAAG;AACpB;AAEO,SAAS,kBAAkB,KAAU,KAAe;AACzD,QAAM,MAAY,IAAI,MAAM,QAAQ,IAAI,GAAG;AAC3C,QAAM,YAAY,IAAI;AACtB,YAAU,cAAc;AACxB,YAAU,SAAS,aAAa,MAAM,IAAI,OAAO,MAAM,GAAG,CAAC;AAE3D,QAAM,WAAW,uBAAuB,IAAI,OAAO,WAAW,GAAG;AACjE,QAAMC,SAAQ,IAAI,MAAM,QAAQ,IAAI,QAAQ;AAC5C,EAAAA,OAAM,SAAS,CAAC,WAAqB;AACnC,oBAAgB,QAAQ,CAAC,aAAuB;AAC9C,MAAC,SAAkC,MAAM,IAAI,OAAO,MAAM,GAAG,CAAC;AAC9D,MAAC,SAAkC,SAAS,IAAI,OAAO,MAAM,GAAG,CAAC;AACjE,aAAO;AAAA,IACT,CAAC;AAAA,EACH,CAAC;AACH;AAEA,IAAMC,gBAAeT,aAAY,CAAC,MAAM,CAAC;AACzC,IAAM,oBAAoB,WAAWS,aAAY;AACjD,IAAM,mBAAmB,UAAUA,aAAY;AACxC,SAAS,cAAc,KAAU;AACtC,oBAAkB,IAAI,KAAK,EAAE,QAAQ,SAAO;AAC1C,UAAM,MAAY,IAAI,MAAM,QAAQ,IAAI,GAAG;AAC3C,QAAI,kBAAkB,IAAI;AAC1B,UAAM,OAAO,IAAI,OAAO,WAAW,MAAM,GAAG,MAAM;AAClD,SAAK,aAAa,IAAI,WAAW;AACjC,UAAM,IAAI,KAAK,IAAI;AACnB,QAAI,OAAO,MAAM,GAAG,IAAI,aAAa,OAAO;AAC1C,UAAI,WAAW,IAAI,qBAAqB,QAAQ,GAAG,CAAC;AACpD,UAAI,WAAW,IAAI,kBAAkB;AAAA,QACnC,OAAO;AAAA,QACP,WAAW;AAAA,MACb,CAAC;AACD,UAAI,SAAS,IAAIJ,MAAK,UAAU,QAAQ;AACxC,aAAO,SAAS,KAAK,UAAU;AAC/B,cAAQ,IAAI,KAAK,MAAM;AACvB,UAAI,IAAI,MAAM;AAEd,YAAM,aAAa,IAAI,WAAW,CAAC;AACnC,UAAI,IAAI,UAAU;AAAA,IACpB;AAGA,UAAMK,WAAUD,cAAa,IAAI,KAAK;AACtC,QAAIC,SAAQ,SAAS,MAAM,GAAG;AAC5B,YAAMC,aAAYD,SAAQ,KAAK,CAAC,QAAgB,OAAe,SAAmB,UAAUA,SAAQ,SAAS,CAAC;AAC9G,UAAIC,YAAW;AACb,eAAO,OAAO,GAAG,IAAI,UAAU,GAAGA,UAAS;AAC3C,eAAO,OAAOA,UAAS,IAAI,UAAU,GAAG,GAAG;AAAA,MAC7C;AAAA,IACF;AAGA,UAAM,SAAS,IAAI,kBAAkB,IAAI,sBAAsB,sBAAsB,KAAK,GAAI;AAC9F,WAAO,OAAO,OAAO,OAAO,8BAA8B;AAC1D,WAAO,OAAO,OAAO,OAAO,iCAAiC;AAC7D,WAAO,mBAAmB;AAC1B,WAAO,QAAQ,UAAU,SAAS,GAAG,CAAC;AACtC,QAAI,IAAI,MAAM;AACd,YAAQ,IAAI,KAAK,MAAM;AAEvB,UAAM,eAAe,IAAI,kBAAkB,qBAAqB,sBAAsB;AAAA,MACpF,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,WAAW;AAAA,MACX,UAAU;AAAA,IACZ,CAAC;AACD,kBAAc,IAAI,KAAK,YAAY;AAEnC,UAAM,YAAY,IAAI;AACtB,cAAU,cAAc;AAGxB,aAAS,uBAAuB;AAC9B,gBAAU,cAAc;AAAA,IAC1B;AAEA,UAAM,YAAY,OAAO,OAAO,GAAG;AACnC,UAAM,YAAY,IAAI,MAAM,QAAQ,IAAI,SAAS;AACjD,UAAM,QAAQ,YAAY,OAAO,MAAM,SAAS,IAAI,OAAO,MAAM,GAAG;AACpE,cAAU,SAAS,aAAa,MAAM,IAAI,KAAK;AAC/C,cAAU,SAAS,UAAU,QAAQ,aAAa;AAClD,cAAU,SAAS,YAAY,MAAM,IAAI,qBAAqB,sBAAsB,CAAC;AACrF,cAAU,qBAAqB;AAC/B,QAAI,iBAAiB;AAGrB,UAAM,WAAW,uBAAuB,IAAI,OAAO,WAAW,GAAG;AACjE,UAAMH,SAAQ,IAAI,MAAM,QAAQ,IAAI,QAAQ;AAC5C,IAAAA,OAAM,SAAS,CAAC,WAAqB;AACnC,sBAAgB,QAAQ,CAACI,cAAuB;AAC9C,QAAAA,YAAWA,UAAS,MAAM;AAC1B,QAAAA,UAAS,OAAO,GAAG,IAAI,UAAU,OAAO,KAAK,GAAG,CAAC,CAAC;AAClD,QAACA,UAAkC,MAAM,IAAI,KAAK;AAClD,QAACA,UAAkC,SAAS,IAAI,KAAK;AACrD,QAACA,UAAkC,oBAAoB;AACvD,eAAOA;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AAED,kBAAc,GAAG;AAAA,EACnB,CAAC;AAED,mBAAiB,IAAI,KAAK,EAAE,QAAQ,SAAO;AACzC,kBAAc,KAAK,GAAG;AACtB,kBAAc,KAAK,GAAG;AAEtB,UAAM,YAAY,OAAO,OAAO,GAAG;AACnC,UAAM,YAAY,IAAI,MAAM,QAAQ,IAAI,SAAS;AACjD,QAAI,WAAW;AACb,aAAO,OAAO,SAAS,IAAI;AAC3B,iCAA2B,IAAI,OAAO,SAAS;AAAA,IACjD;AAAA,EACF,CAAC;AAED,QAAM,cAAc,IAAI,MAAM,GAAG,SAAS;AAC1C,QAAM,UAAUH,cAAa,IAAI,KAAK;AACtC,UAAQ,QAAQ,SAAO;AACrB,UAAM,MAAM,IAAI,MAAM,QAAQ,IAAI,GAAG;AACrC,QAAI,kBAAkB,IAAI;AAC1B,UAAM,OAAO,MAAM,IAAI,GAAG;AAC1B,SAAK,OAAO,KAAK,UAAU;AAC3B,SAAK,SAAS;AACd,SAAK,aAAa,IAAI,WAAW;AAEjC,UAAM,YAAY,OAAO,OAAO,GAAG;AACnC,UAAM,YAAY,IAAI,MAAM,QAAQ,IAAI,SAAS;AACjD,UAAM,eAAe,QAAQ,KAAK,iBAAe,gBAAgB,OAAO,cAAc,WAAW;AAEjG,uBAAmB,KAAK,SAAS,KAAK,YAAY;AAElD,QAAI,CAAC,eAAe,CAAC,cAAc;AACjC;AAAA,IACF;AAEA,UAAM,YAAY,IAAI,MAAM,QAAQ,IAAI,YAAY;AACpD,UAAM,eAAeP,eAAc,IAAI,OAAOC,cAAa;AAC3D,UAAM,YAAY,IAAI,MAAM,QAAQ,IAAI,YAAY;AACpD,cAAU,iBAAiB,YAAY;AAEvC,QAAI,iBAAiB,SAAS;AAC9B,UAAM,MAAM,UAAU,MAAM,EAAE,IAAI,YAAY,EAAE,SAAS;AACzD,UAAM,eAAe,QAAQ,IAAI,YAAY;AAC7C,iBAAa,MAAM,UAAU,KAAK,IAAI,KAAK,UAAU,MAAM,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC;AAC7E,iBAAa,uBAAuB;AAGpC,UAAM,WAAW,KAAK,cAAc,YAAY;AAChD,UAAM,iBAAiB,QAAQ,OAAO,MAAM,GAAG,IAAI,aAAa,SAAS;AACzE,QAAI,aAAa,gBAAgB;AAC/B,UAAI,OAAO,MAAM,GAAG,IAAI,aAAa,OAAO;AAC1C,cAAM,aAAa,IAAI,UAAU,OAAO,KAAK,GAAG,CAAC;AACjD,gBAAQ,IAAI,WAAW,WAAW,WAAW,SAAS,eAAe,UAAU,EAAE;AAAA,MACnF;AACA,UAAI,UAAU;AACZ,eAAO,MAAM,GAAG,KAAK,aAAa;AAAA,MACpC,OAAO;AACL,eAAO,MAAM,GAAG,KAAK,CAAC,aAAa;AACnC,eAAO,MAAM,GAAG;AAChB,cAAM,aAAa,IAAI,UAAU,OAAO,KAAK,GAAG,CAAC;AACjD,YAAI,iBAAiB,SAAS,UAAU,UAAU,SAAS,OAAO,MAAM,GAAG,CAAC,QAAQ;AAAA,MACtF;AAAA,IACF,OAAO;AACL;AAAA,IACF;AAEA,QAAI,kBAAkB,WAAW;AACjC,UAAM,WAAW,YAAY,IAAI,UAAU,IAAI,YAAY,CAAC,IAAI;AAChE,QAAI,YAAY,UAAU;AACxB,UAAI,CAAC,2BAA2B;AAC9B,oCAA4B,IAAI,UAAUF,UAAS,yBAAyB;AAAA,MAC9E;AACA,aAAO,gBAAgB,GAAG,GAAG,SAAS,GAAG;AACzC,gBAAU,KAAK,UAAU,WAAW,EAAE,SAAS,MAAM;AACrD,gCAA0B,iBAAiB,WAAW,MAAM,KAAK;AACjE,gBAAU,kBAAkB;AAC5B,oBAAc,GAAG;AAAA,IACnB;AAAA,EACF,CAAC;AAED,aAAW,GAAG;AAEd,gBAAc,KAAK;AACrB;;;AKrUA,SAAS,eAAAD,cAAa,gBAAAa,qBAAoB;AAC1C,SAAc,aAAa;AAI3B,IAAM,wBAAwBb,aAAY,CAAC,QAAQ,eAAe,CAAC;AAC5D,SAAS,uBAAuB,KAAU;AAC/C,wBAAsB,IAAI,KAAK,EAAE,QAAQ,SAAO;AAE9C,QAAIa,cAAa,IAAI,OAAO,OAAO,GAAG,GAAG;AACvC,sBAAgB,MAAM,GAAG,IAAI,OAAO,MAAM,GAAG;AAAA,IAC/C,OAAO;AACL,UAAI,OAAO,MAAM,GAAG,MAAM,gBAAgB,MAAM,GAAG,GAAG;AACpD,eAAO,MAAM,GAAG,IAAI,gBAAgB,MAAM,GAAG;AAC7C,0BAAkB,KAAK,GAAG;AAAA,MAC5B;AAAA,IACF;AAAA,EACF,CAAC;AACH;;;AClBA;AAAA,EAKE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAGP,IAAM,aAAa,oBAAI,IAA2B;AAElD,SAAS,MAAM,KAAe,EAAE,SAAS,KAAK,GAAoB;AAChE,MAAI,YAAY;AAAG,WAAO;AAE1B,QAAM,EAAE,MAAM,IAAuB;AACrC,QAAM,gBAAgB,OAAO,KAAK,KAAK;AACvC,SAAO;AACT;AAEA,IAAM,eAAe,oBAAoB,eAAe;AACjD,IAAM,wBAAuC;AAAA,EAClD,eAAe;AAAA,EACf,WAAW,aAAa;AAAA,EACxB,aAAa,aAAa;AAAA,EAC1B,qBAAqB,SAAS,oBAAoB,KAAe;AAC/D,WAAO;AAAA,MACL,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,OAAO,KAAK,gBAAgB,OAAO,GAAG;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AAAA,EACA,wBAAwB,2BAA2B,YAAY,KAAK;AACtE;;;AXzBA,SAAS,QAAQ,KAAU;AACzB,UAAQ,GAAG;AACX,kBAAgB;AAChB,gBAAc,GAAG;AACnB;AAEA,cAAc,UAAU;AAAA,EACtB,MAAM;AAAA,EACN,aAAa;AAAA,EACb;AAAA,EACA,QAAQ,EAAE,IAAI,UAAU,QAAQ,EAAE,YAAY,YAAY,sBAAsB,UAAU,aAAa,EAAE;AAAA,EACzG,UAAU,EAAE,KAAK,EAAE,IAAI,UAAU,UAAU,eAAe,EAAE;AAAA,EAC5D,QAAQ;AAAA,IACN,EAAE,QAAQ,eAAe,OAAO,aAAa,YAAY;AAAA,IACzD,EAAE,QAAQ,wBAAwB,OAAO,aAAa,YAAY;AAAA,EACpE;AAAA,EACA,aAAa,EAAE,IAAI,UAAU,SAAS,kBAAkB;AAAA,EACxD,eAAe,EAAE,WAAW,iBAAiB,QAAQ,sBAAsB;AAC7E,CAAC","sourcesContent":["import { App, PermissionE, SystemOrderE, registerAddon } from \"hubs\";\nimport { PortalPrefab, loadPortalModel } from \"./portal-prefab\";\nimport { portalInflator } from \"./portal-inflator\";\nimport { loadSfx, portalsSystem } from \"./portal-system\";\nimport { portalChatCommand } from \"./chat-commands\";\nimport { networkedPortalsSystem } from \"./networked-portal-system\";\nimport { NetworkedPortal } from \"./components\";\nimport { NetworkedPortalSchema } from \"./portal-network-schema\";\nimport { registerInput } from \"./input\";\nimport { ADDON_ID } from \"./consts\";\n\nfunction onReady(app: App) {\n  loadSfx(app);\n  loadPortalModel();\n  registerInput(app);\n}\n\nregisterAddon(ADDON_ID, {\n  name: \"Portals Add-On\",\n  description: \"Simple portals implementation.\",\n  onReady,\n  prefab: { id: \"portal\", config: { permission: PermissionE.SPAWN_AND_MOVE_MEDIA, template: PortalPrefab } },\n  inflator: { jsx: { id: \"portal\", inflator: portalInflator } },\n  system: [\n    { system: portalsSystem, order: SystemOrderE.PostPhysics },\n    { system: networkedPortalsSystem, order: SystemOrderE.PostPhysics }\n  ],\n  chatCommand: { id: \"portal\", command: portalChatCommand },\n  networkSchema: { component: NetworkedPortal, schema: NetworkedPortalSchema }\n});\n","/** @jsx createElementEntity */\nimport { cloneModelFromCache, COLLISION_LAYERS, createElementEntity, EntityDef, Fit, FLOATY_OBJECT_FLAGS, getAbsoluteHref, loadModel, LoadModelResultT, Shape } from \"hubs\";\nimport { PortalParams } from \"./portal-inflator\";\nimport portal from \"./assets/portal.glb\";\nimport { Object3D } from \"three\";\n\nlet model: Object3D | null;\nexport async function loadPortalModel() {\n  model = ((await loadModel(portal, null, true)) as LoadModelResultT).scene;\n}\n\nexport function PortalPrefab(params: PortalParams): EntityDef {\n  return (\n    <entity\n      name=\"Portal\"\n      networked\n      networkedTransform\n      portal={{\n        debug: params.debug,\n        name: params.name\n      }}\n      cursorRaycastable\n      remoteHoverTarget\n      handCollisionTarget\n      offersRemoteConstraint\n      offersHandConstraint\n      floatyObject={{\n        flags: FLOATY_OBJECT_FLAGS.HELIUM_WHEN_LARGE\n      }}\n      destroyAtExtremeDistance\n      holdable\n      rigidbody={{\n        collisionGroup: COLLISION_LAYERS.INTERACTABLES,\n        collisionMask:\n          COLLISION_LAYERS.HANDS |\n          COLLISION_LAYERS.ENVIRONMENT |\n          COLLISION_LAYERS.INTERACTABLES |\n          COLLISION_LAYERS.AVATAR\n      }}\n      deletable\n    >\n      <entity name=\"Portal Model\" model={{ model: cloneModelFromCache(portal).scene }} />\n    </entity>\n  );\n}\n","import { addComponent } from \"bitecs\";\nimport { ComponentDataT, EntityID, HubsWorld, addObject3DComponent } from \"hubs\";\nimport { NetworkedPortal, Portal } from \"./components\";\nimport { ShaderMaterial, Mesh, PlaneBufferGeometry, Vector3, Color, FrontSide } from \"three\";\nimport { portalVertexShader, portalFragmentShader } from \"./shaders\";\n\nexport const PORTAL_FLAGS = {\n  DEBUG: 1 << 0,\n  IS_INSIDE: 1 << 1\n};\n\nexport type PortalParams = {\n  name?: string;\n  debug?: boolean;\n  color?: number;\n};\n\nconst DEFAULTS: Required<PortalParams> = {\n  debug: false,\n  name: \"Unnamed portal\",\n  color: 0x0000ff\n};\n\nexport function portalInflator(world: HubsWorld, eid: number, params?: ComponentDataT): EntityID {\n  const portalParams: PortalParams = Object.assign({}, DEFAULTS, params);\n  addComponent(world, Portal, eid);\n  addComponent(world, NetworkedPortal, eid);\n\n  const { debug, name } = portalParams;\n  if (debug) {\n    Portal.flags[eid] |= PORTAL_FLAGS.DEBUG;\n  }\n  if (name) {\n    Portal.name[eid] = APP.getSid(name);\n  }\n  if (params?.color) {\n    Portal.color[eid] = params.color;\n    NetworkedPortal.color[eid] = params.color;\n  } else {\n    const randColor = Math.random() * 0xffffff;\n    Portal.color[eid] = randColor;\n    NetworkedPortal.color[eid] = randColor;\n  }\n\n  Portal.count[eid] = 0;\n\n  const plane = new Mesh(\n    new PlaneBufferGeometry(2.5, 2.5),\n    new ShaderMaterial({\n      uniforms: {\n        iChannel0: { value: null },\n        iTime: { value: 0.0 },\n        iResolution: { value: new Vector3() },\n        iPortalColor: { value: new Color(Portal.color[eid]) }\n      },\n      vertexShader: portalVertexShader,\n      fragmentShader: portalFragmentShader,\n      side: FrontSide,\n      transparent: true\n    })\n  );\n\n  addObject3DComponent(world, eid, plane);\n  return eid;\n}\n","import { Types, defineComponent } from \"bitecs\";\n\nexport const Portal = defineComponent({\n  flags: Types.ui8,\n  name: Types.ui32,\n  target: Types.ui32,\n  color: Types.ui32,\n  count: Types.ui8\n});\n\nexport const NetworkedPortal = defineComponent({\n  color: Types.ui32\n});\n","export const portalVertexShader = `\nvarying vec2 vUv;\nvoid main()\n{\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    vUv = uv;\n    // vUv.x = 1.0 - vUv.x;\n}\n`;\n\nexport const portalFragmentShader = `\nvarying vec2 vUv;\n\nuniform sampler2D iChannel0;\nuniform vec3 iResolution;\nuniform vec3 iPortalColor;\nuniform float iTime;\n \n#include <common>\n\nvec3 greyscale(vec3 color, float str) {\n    float g = dot(color, vec3(0.299, 0.587, 0.114));\n    return mix(color, vec3(g), str);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 2.0*(fragCoord-.5*iResolution.xy)/iResolution.xy;\n    uv.y *= 0.65;\n\n    // polar\n    float d = length(uv); \n    //float alpha = atan(uv.y, uv.x) / (2.*PI) + 0.5; // normalize -pi,pi to 0, 1 for display\n    float alpha = atan(uv.y, uv.x); //-pi to pi\n    vec2 pc = vec2(d, alpha); // polar coords\n    \n    //fancy calc or irregular shape\n    float sinVal = sin(0.5+pc.y*3.+t*2.)*sin(pc.y*8.+t*2.)*0.04;\n    float thk = 0.1;\n    float res;\n    float r = 0.51;\n    float targetVal = r + sinVal;\n    \n    res = 1. - smoothstep(targetVal-thk, targetVal+thk, d);\n    \n    vec3 col;\n    \n    vec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    float cLength = length(cPos);\n    vec2 rippleUV = fragCoord.xy/iResolution.xy+(cPos/cLength)*cos(cLength*12.0-iTime*4.0) * 0.01;\n    vec3 portalColor = texture(iChannel0,rippleUV).xyz;\n    portalColor = greyscale(portalColor, 1.0);\n    vec3 bgColor = vec3(0);\n    \n    col = mix(bgColor, portalColor, res);\n    vec3 edgeColor = iPortalColor;  // add edge tint\n    float edgeDist = smoothstep(targetVal-thk,targetVal+thk, d);\n    if(d < targetVal+thk){\n        col += edgeColor*edgeDist; // could be smoother\n    }\n    if (res < 0.01) discard;\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n \nvoid main() {\n    mainImage(gl_FragColor, vUv * iResolution.xy);\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n}\n`;\n","import { defineQuery, enterQuery, exitQuery } from \"bitecs\";\nimport {\n  App,\n  SystemsE,\n  CharacterControllerSystem,\n  anyEntityWith,\n  AvatarPOVNode,\n  Layers,\n  Networked,\n  EntityID,\n  deleteTheDeletableAncestor,\n  findChildWithComponent,\n  GLTFModel,\n  updateMaterials,\n  SoundEffectsSystem,\n  SoundDefT\n} from \"hubs\";\nimport {\n  Vector3,\n  Matrix4,\n  Mesh,\n  ShaderMaterial,\n  PerspectiveCamera,\n  WebGLRenderTarget,\n  LinearFilter,\n  NearestFilter,\n  RGBAFormat,\n  sRGBEncoding,\n  Sphere,\n  SphereBufferGeometry,\n  MeshBasicMaterial,\n  AxesHelper,\n  Object3D,\n  MathUtils,\n  Material,\n  MeshStandardMaterial\n} from \"three\";\nimport { Portal } from \"./components\";\nimport { PORTAL_FLAGS } from \"./portal-inflator\";\nimport PORTAL_SFX_URL from \"./assets/portal.mp3\";\nimport { animationJobs } from \"./utils\";\nimport { checkInput } from \"./input\";\n\nconst AABBs = new Map();\nconst renderTargets = new Map();\nconst helpers = new Map();\nconst cameras = new Map();\nconst tmpMat = new Matrix4();\nconst targetMat = new Matrix4().identity();\nconst portalPos = new Vector3();\nconst avatarPOVPos = new Vector3();\nconst objWorldDir = new Vector3();\nconst AABBOffset = new Vector3(0, 0.2, 0);\nlet characterControllerSystem: CharacterControllerSystem;\n\nexport const PORTAL_RENDER_WIDTH = 512;\nexport const PORTAL_RENDER_HEIGHT = 512;\nconst RADIUS = 0.75;\n\nconst sounds = new Map();\nexport function loadSfx(app: App) {\n  [PORTAL_SFX_URL].forEach(url => {\n    const sfxSystem = app.getSystem(SystemsE.SoundEffectsSystem) as SoundEffectsSystem;\n    sfxSystem.registerSound(url).then((sound: SoundDefT) => {\n      sounds.set(sound.url, sound.id);\n    });\n  });\n}\n\nfunction playPortalSfx(app: App) {\n  app.getSystem(SystemsE.SoundEffectsSystem).playSoundOneShot(sounds.get(PORTAL_SFX_URL));\n}\n\nfunction updateRenderTarget(app: App, portals: number[], source: number, target: number) {\n  const obj = <Mesh>app.world.eid2obj.get(source)!;\n  const shader = obj.material as ShaderMaterial;\n  shader.uniforms.iTime.value = app.world.time.elapsed / 1000;\n  shader.uniformsNeedUpdate = true;\n\n  if (!target) return;\n\n  const scene = app.world.scene;\n  const renderer = app.scene.renderer;\n\n  const tmpVRFlag = renderer.xr.enabled;\n  renderer.xr.enabled = false;\n\n  // TODO we are doing this because aframe uses this hook for tock.\n  // Namely to capture what camera was rendering. We don't actually use that in any of our tocks.\n  // Also tock can likely go away as a concept since we can just direclty order things after render in raf if we want to.\n  const tmpOnAfterRender = scene.onAfterRender;\n  scene.onAfterRender = () => {};\n\n  // TODO this assumption is now not true since we are not running after render. We should probably just permanently turn off autoUpdate and run matrix updates at a point we want to.\n  // The entire scene graph matrices should already be updated\n  // in tick(). They don't need to be recomputed again in tock().\n  const tmpAutoUpdate = scene.autoUpdate;\n  scene.autoUpdate = false;\n\n  const renderTarget = renderTargets.get(source);\n  renderTarget.needsUpdate = false;\n  renderTarget.lastUpdated = app.world.time.elapsed;\n\n  const tmpRenderTarget = renderer.getRenderTarget();\n  renderer.setRenderTarget(renderTarget);\n  renderer.clearDepth();\n  portals.forEach(p => {\n    if (p === target) {\n      const obj = app.world.eid2obj.get(p);\n      if (obj) obj.visible = false;\n    }\n  });\n  renderer.render(scene, cameras.get(target));\n  portals.forEach(p => {\n    if (p === target) {\n      const obj = app.world.eid2obj.get(p);\n      if (obj) obj.visible = true;\n    }\n  });\n  renderer.setRenderTarget(tmpRenderTarget);\n\n  renderer.xr.enabled = tmpVRFlag;\n  scene.onAfterRender = tmpOnAfterRender;\n  scene.autoUpdate = tmpAutoUpdate;\n}\n\nfunction disposePortal(app: App, eid: EntityID) {\n  if (Portal.flags[eid] & PORTAL_FLAGS.DEBUG) {\n    const helper = helpers.get(eid) as Object3D;\n    helper.removeFromParent();\n    helpers.delete(eid);\n  }\n\n  AABBs.delete(eid);\n\n  const renderTarget = renderTargets.get(eid);\n  renderTarget.dispose();\n  renderTargets.delete(eid);\n\n  cameras.delete(eid);\n}\n\nexport function updatePortalColor(app: App, eid: EntityID) {\n  const obj = <Mesh>app.world.eid2obj.get(eid)!;\n  const shaderMat = obj.material as ShaderMaterial;\n  shaderMat.needsUpdate = true;\n  shaderMat.uniforms.iPortalColor.value.set(Portal.color[eid]);\n\n  const modelEid = findChildWithComponent(app.world, GLTFModel, eid)!;\n  const model = app.world.eid2obj.get(modelEid)!;\n  model.traverse((object: Object3D) => {\n    updateMaterials(object, (material: Material) => {\n      (material as MeshStandardMaterial).color.set(Portal.color[eid]);\n      (material as MeshStandardMaterial).emissive.set(Portal.color[eid]);\n      return material;\n    });\n  });\n}\n\nconst portalsQuery = defineQuery([Portal]);\nconst portalsEnterQuery = enterQuery(portalsQuery);\nconst portalsExitQuery = exitQuery(portalsQuery);\nexport function portalsSystem(app: App) {\n  portalsEnterQuery(app.world).forEach(eid => {\n    const obj = <Mesh>app.world.eid2obj.get(eid)!;\n    obj.updateMatrixWorld(true);\n    const AABB = new Sphere(AABBOffset.clone(), RADIUS);\n    AABB.applyMatrix4(obj.matrixWorld);\n    AABBs.set(eid, AABB);\n    if (Portal.flags[eid] & PORTAL_FLAGS.DEBUG) {\n      var geometry = new SphereBufferGeometry(RADIUS, 6, 6);\n      var material = new MeshBasicMaterial({\n        color: 0xffffff,\n        wireframe: true\n      });\n      var helper = new Mesh(geometry, material);\n      helper.position.copy(AABBOffset);\n      helpers.set(eid, helper);\n      obj.add(helper);\n\n      const axesHelper = new AxesHelper(1);\n      obj.add(axesHelper);\n    }\n\n    // Link this portal to the last one\n    const portals = portalsQuery(app.world);\n    if (portals.length % 2 === 0) {\n      const targetEid = portals.find((_value: number, index: number, _obj: number[]) => index === portals.length - 2);\n      if (targetEid) {\n        Portal.target[eid] = Networked.id[targetEid];\n        Portal.target[targetEid] = Networked.id[eid];\n      }\n    }\n\n    // Add cameras and render targets\n    const camera = new PerspectiveCamera(80, PORTAL_RENDER_WIDTH / PORTAL_RENDER_HEIGHT, 0.1, 1000);\n    camera.layers.enable(Layers.CAMERA_LAYER_THIRD_PERSON_ONLY);\n    camera.layers.enable(Layers.CAMERA_LAYER_VIDEO_TEXTURE_TARGET);\n    camera.matrixAutoUpdate = true;\n    camera.rotateY(MathUtils.degToRad(180));\n    obj.add(camera);\n    cameras.set(eid, camera);\n\n    const renderTarget = new WebGLRenderTarget(PORTAL_RENDER_WIDTH, PORTAL_RENDER_HEIGHT, {\n      format: RGBAFormat,\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      encoding: sRGBEncoding\n    });\n    renderTargets.set(eid, renderTarget);\n\n    const shaderMat = obj.material as ShaderMaterial;\n    shaderMat.needsUpdate = true;\n\n    // Only update the renderTarget when the screens are in view\n    function setRenderTargetDirty() {\n      shaderMat.needsUpdate = true;\n    }\n\n    const targetNid = Portal.target[eid];\n    const targetEid = app.world.nid2eid.get(targetNid);\n    const color = targetEid ? Portal.color[targetEid] : Portal.color[eid];\n    shaderMat.uniforms.iPortalColor.value.set(color);\n    shaderMat.uniforms.iChannel0.value = renderTarget.texture;\n    shaderMat.uniforms.iResolution.value.set(PORTAL_RENDER_WIDTH, PORTAL_RENDER_HEIGHT, 1);\n    shaderMat.uniformsNeedUpdate = true;\n    obj.onBeforeRender = setRenderTargetDirty;\n\n    // Update portal model material color\n    const modelEid = findChildWithComponent(app.world, GLTFModel, eid)!;\n    const model = app.world.eid2obj.get(modelEid)!;\n    model.traverse((object: Object3D) => {\n      updateMaterials(object, (material: Material) => {\n        material = material.clone();\n        material.name = `${app.getString(Portal.name[eid])} Material`;\n        (material as MeshStandardMaterial).color.set(color);\n        (material as MeshStandardMaterial).emissive.set(color);\n        (material as MeshStandardMaterial).emissiveIntensity = 0.5;\n        return material;\n      });\n    });\n\n    playPortalSfx(app);\n  });\n\n  portalsExitQuery(app.world).forEach(eid => {\n    animationJobs.stop(eid);\n    disposePortal(app, eid);\n\n    const targetNid = Portal.target[eid];\n    const targetEid = app.world.nid2eid.get(targetNid);\n    if (targetEid) {\n      Portal.target[targetEid] = 0;\n      deleteTheDeletableAncestor(app.world, targetEid);\n    }\n  });\n\n  const updateState = app.scene.is(\"entered\");\n  const portals = portalsQuery(app.world);\n  portals.forEach(eid => {\n    const obj = app.world.eid2obj.get(eid)!;\n    obj.updateMatrixWorld(true);\n    const AABB = AABBs.get(eid);\n    AABB.center.copy(AABBOffset);\n    AABB.radius = RADIUS;\n    AABB.applyMatrix4(obj.matrixWorld);\n\n    const targetNid = Portal.target[eid];\n    const targetEid = app.world.nid2eid.get(targetNid);\n    const targetPortal = portals.find(otherPortal => otherPortal !== eid && targetEid === otherPortal)!;\n\n    updateRenderTarget(app, portals, eid, targetPortal);\n\n    if (!updateState || !targetPortal) {\n      return;\n    }\n\n    const targetObj = app.world.eid2obj.get(targetPortal)!;\n    const avatarPOVEid = anyEntityWith(app.world, AvatarPOVNode);\n    const avatarPOV = app.world.eid2obj.get(avatarPOVEid)!;\n    avatarPOV.getWorldPosition(avatarPOVPos);\n\n    obj.getWorldPosition(portalPos);\n    const len = portalPos.clone().sub(avatarPOVPos).lengthSq();\n    const targetCamera = cameras.get(targetPortal) as PerspectiveCamera;\n    targetCamera.fov = MathUtils.lerp(80, 120, MathUtils.clamp(1 - len / 5, 0, 1));\n    targetCamera.updateProjectionMatrix();\n\n    // Update in/out state\n    const isInside = AABB.containsPoint(avatarPOVPos);\n    const isInsidePortal = Boolean(Portal.flags[eid] & PORTAL_FLAGS.IS_INSIDE);\n    if (isInside !== isInsidePortal) {\n      if (Portal.flags[eid] & PORTAL_FLAGS.DEBUG) {\n        const portalName = app.getString(Portal.name[eid]);\n        console.log(`You are ${isInside ? \"inside\" : \"outside\"} the portal ${portalName}`);\n      }\n      if (isInside) {\n        Portal.flags[eid] |= PORTAL_FLAGS.IS_INSIDE;\n      } else {\n        Portal.flags[eid] &= ~PORTAL_FLAGS.IS_INSIDE;\n        Portal.count[eid]++;\n        const portalName = app.getString(Portal.name[eid]);\n        app.messageDispatch?.dispatch(`Portal ${portalName} used ${Portal.count[eid]} times`);\n      }\n    } else {\n      return;\n    }\n\n    obj.getWorldDirection(objWorldDir);\n    const isFacing = objWorldDir.dot(portalPos.sub(avatarPOVPos)) < 0;\n    if (isInside && isFacing) {\n      if (!characterControllerSystem) {\n        characterControllerSystem = app.getSystem(SystemsE.CharacterControllerSystem) as CharacterControllerSystem;\n      }\n      tmpMat.makeTranslation(0, 0, RADIUS * 1.2);\n      targetMat.copy(targetObj.matrixWorld).multiply(tmpMat);\n      characterControllerSystem.travelByWaypoint(targetMat, true, false);\n      avatarPOV.updateMatrixWorld();\n      playPortalSfx(app);\n    }\n  });\n\n  checkInput(app);\n\n  animationJobs.tick();\n}\n","import { App, EntityID, JobRunner, Value, animate, crNextFrame, elasticOut } from \"hubs\";\nimport { Vector3 } from \"three\";\n\nexport const animationJobs = new JobRunner();\n\nexport function* animatePortal(app: App, eid: EntityID) {\n  const obj = app.world.eid2obj.get(eid)!;\n  const onAnimate = (values: Value[]) => {\n    const scale = values[0] as Vector3;\n    obj.scale.copy(scale);\n    obj.matrixNeedsUpdate = true;\n  };\n  const scalar = 0.001;\n  const startScale = new Vector3().copy(obj.scale).multiplyScalar(scalar);\n  const endScale = new Vector3().copy(obj.scale);\n  onAnimate([startScale]);\n  yield crNextFrame();\n  yield* animate({\n    properties: [[startScale, endScale]],\n    durationMS: 1000,\n    easing: elasticOut,\n    fn: onAnimate\n  });\n}\n","import {\n  App,\n  EntityID,\n  HoveredRemoteRight,\n  InputDeviceE,\n  InputPathsE,\n  InputSetsE,\n  SystemsE,\n  UserInputSystem,\n  paths,\n  xforms\n} from \"hubs\";\nimport { ADDON_ID } from \"./consts\";\nimport { spawnPortal } from \"./chat-commands\";\nimport { defineQuery, hasComponent } from \"bitecs\";\nimport { Portal } from \"./components\";\nimport { updatePortalColor } from \"./portal-system\";\n\nconst PORTAL_CREATE_ACTION = `/${ADDON_ID}/create`;\nconst PORTAL_CREATE_PATH = `${InputPathsE.actions}/${PORTAL_CREATE_ACTION}`;\nconst PORTAL_CHANGE_COLOR_ACTION = `/${ADDON_ID}/changeColor`;\nconst PORTAL_CHANGE_COLOR_PATH = `${InputPathsE.actions}/${PORTAL_CHANGE_COLOR_ACTION}`;\n\nexport function registerInput(app: App) {\n  const userInput = app.getSystem(SystemsE.UserInputSystem) as UserInputSystem;\n  userInput.registerPaths([\n    {\n      type: InputPathsE.actions,\n      value: PORTAL_CREATE_ACTION\n    },\n    {\n      type: InputPathsE.actions,\n      value: PORTAL_CHANGE_COLOR_ACTION\n    }\n  ]);\n  userInput.registerBindings(InputDeviceE.KeyboardMouse, {\n    [InputSetsE.global]: [\n      {\n        src: {\n          bool: paths.device.keyboard.key(\"control\"),\n          value: paths.device.keyboard.key(\"n\")\n        },\n        dest: { value: \"/var/control+n\" },\n        xform: xforms.copyIfTrue\n      },\n      {\n        src: { value: \"/var/control+n\" },\n        dest: { value: PORTAL_CHANGE_COLOR_PATH },\n        xform: xforms.rising\n      },\n      {\n        src: {\n          bool: paths.device.keyboard.key(\"control\"),\n          value: paths.device.keyboard.key(\"n\")\n        },\n        dest: { value: \"/var/notcontrol+n\" },\n        xform: xforms.copyIfFalse\n      },\n      {\n        src: { value: \"/var/notcontrol+n\" },\n        dest: { value: PORTAL_CREATE_PATH },\n        xform: xforms.rising\n      }\n    ]\n  });\n}\n\nconst hoveredPortalsQuery = defineQuery([Portal, HoveredRemoteRight]);\nexport function checkInput(app: App) {\n  const userInput = app.getSystem(SystemsE.UserInputSystem) as UserInputSystem;\n  if (userInput.get(PORTAL_CREATE_PATH)) {\n    spawnPortal(app);\n  } else if (userInput.get(PORTAL_CHANGE_COLOR_PATH)) {\n    hoveredPortalsQuery(app.world).forEach(eid => {\n      Portal.color[eid] = Math.random() * 0xffffff;\n      updatePortalColor(app, eid);\n      const targetNid = Portal.target[eid];\n      const targetEid = app.world.nid2eid.get(targetNid);\n      if (targetEid) {\n        Portal.color[targetEid] = Portal.color[eid];\n        updatePortalColor(app, targetEid);\n      }\n    });\n  }\n}\n","export const ADDON_ID = \"hubs-portals-addon\";\n","import { defineQuery } from \"bitecs\";\nimport { App, AvatarPOVNode, CharacterControllerSystem, SystemsE, anyEntityWith, createNetworkedEntity } from \"hubs\";\nimport { Vector3 } from \"three\";\nimport { Portal } from \"./components\";\nimport { animatePortal, animationJobs } from \"./utils\";\n\nexport function spawnPortal(app: App, color?: number) {\n  const avatarEid = anyEntityWith(app.world, AvatarPOVNode)!;\n  const avatarPov = app.world.eid2obj.get(avatarEid)!;\n  const portals = portalsQuery(app.world);\n  const eid = createNetworkedEntity(app.world, \"portal\", {\n    name: `My Portal ${portals.length}`,\n    color: color ? color : Math.random() * 0xffffff\n  });\n\n  const characterControllerSystem = app.getSystem(SystemsE.CharacterControllerSystem) as CharacterControllerSystem;\n  avatarPov.getWorldPosition(avatarPOVWorldPos);\n  characterControllerSystem.findPOVPositionAboveNavMesh(\n    avatarPOVWorldPos,\n    avatarPov.localToWorld(initialPos.clone()),\n    outWorldPos,\n    false\n  );\n  const obj = app.world.eid2obj.get(eid)!;\n  outWorldPos.setY(outWorldPos.y - 0.35);\n  obj.position.copy(outWorldPos);\n  avatarPOVWorldPos.y = obj.position.y;\n  obj.lookAt(avatarPOVWorldPos);\n\n  animationJobs.add(eid, () => animatePortal(app, eid));\n}\n\nconst initialPos = new Vector3(0, 0, -1.5);\nconst avatarPOVWorldPos = new Vector3();\nconst outWorldPos = new Vector3();\nconst portalsQuery = defineQuery([Portal]);\nexport function portalChatCommand(app: App, args: string[]) {\n  spawnPortal(app, Number(args[0]));\n}\n","import { defineQuery, hasComponent } from \"bitecs\";\nimport { App, Owned } from \"hubs\";\nimport { NetworkedPortal, Portal } from \"./components\";\nimport { updatePortalColor } from \"./portal-system\";\n\nconst networkedPortalsQuery = defineQuery([Portal, NetworkedPortal]);\nexport function networkedPortalsSystem(app: App) {\n  networkedPortalsQuery(app.world).forEach(eid => {\n    // If I own the entity I'm responsible for updating the networked component\n    if (hasComponent(app.world, Owned, eid)) {\n      NetworkedPortal.color[eid] = Portal.color[eid];\n    } else {\n      if (Portal.color[eid] !== NetworkedPortal.color[eid]) {\n        Portal.color[eid] = NetworkedPortal.color[eid];\n        updatePortalColor(app, eid);\n      }\n    }\n  });\n}\n","import {\n  EntityID,\n  MigrationFn,\n  NetworkSchema,\n  StoredComponent,\n  defineNetworkSchema,\n  deserializerWithMigrations,\n  read,\n  write\n} from \"hubs\";\nimport { NetworkedPortal } from \"./components\";\n\nconst migrations = new Map<EntityID, MigrationFn>();\n\nfunction apply(eid: EntityID, { version, data }: StoredComponent) {\n  if (version !== 1) return false;\n\n  const { color }: { color: number } = data;\n  write(NetworkedPortal.color, eid, color);\n  return true;\n}\n\nconst runtimeSerde = defineNetworkSchema(NetworkedPortal);\nexport const NetworkedPortalSchema: NetworkSchema = {\n  componentName: \"networked-portal\",\n  serialize: runtimeSerde.serialize,\n  deserialize: runtimeSerde.deserialize,\n  serializeForStorage: function serializeForStorage(eid: EntityID) {\n    return {\n      version: 1,\n      data: {\n        color: read(NetworkedPortal.color, eid)\n      }\n    };\n  },\n  deserializeFromStorage: deserializerWithMigrations(migrations, apply)\n};\n"]}